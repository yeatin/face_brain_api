#!/usr/bin/env node
const fs = require("fs");
const path = require("path");

const trio = ["models", "controllers", "routes"];

let [, , ...args] = process.argv;
// For commencement of creation of folders
/**
 * nodetion start -f users customers
 * This creates a general three folders [models,controllers,routers]
 * With the files users.js and customers.js in both of them
 */
const capitalize = (s) => {
  if (typeof s !== "string") return "";
  return s.charAt(0).toUpperCase() + s.slice(1);
};
if (args.includes("start")) {
  args = args.filter((data) => data !== "start");
  if (args.includes("-f") || args.includes("-F")) {
    args = args.filter((data) => data !== "-f");
    args = args.filter((data) => data !== "-F");
    let arr = args;
    // This means the names of the selected should be folder
    ["models", "routes", "controllers"].map((data) => {
      fs.mkdirSync(data, { recursive: true }, (err) => {
        if (err) throw err;
      });
      process.chdir(path.join(__dirname, "/" + data));
      arr.map((info) => {
        fs.mkdirSync(info);
      });
      process.chdir("../");
    });

    console.log(args);
    console.log("Yes");
  } else {
    let arr = args;
    try {
      ["models", "routes", "controllers"].map((data) => {
        fs.mkdirSync(data, { recursive: true }, (err) => {
          if (err) {
            console.log("Can't over right already exsting folder");
          }
        });
        process.chdir(path.join(__dirname, "/" + data));
        arr.map((info) => {
          if (data === "models") {
            // Model strings
            let str = `const mongoose = require("mongoose")\n\nconst ${capitalize(
              info
            )}Schema = new mongoose.Schema({})\n\nmodule.exports = mongoose.model("${capitalize(
              info
            )}",${capitalize(info)}Schema)`;
            fs.writeFileSync(info + ".js", str);
          } else {
            fs.writeFileSync(info + ".js", "");
          }
        });
        process.chdir("../");
      });

      // Now open
    } catch (err) {
      console.log("Folder or file aready");
    }
    console.log(args);
  }
}

// try {
//   if (args[0].toLowerCase() === "start") {
//     args = args.filter((info) => info.toLowerCase() !== "start");
//     // console.log(args);
//     if (args[0] !== null) {
//       if (args[0] === "-f" || args[0] === "-F") {
//         let arr = args.filter((data) => data !== "-f");
//         arr = arr.filter((data) => data !== "-F");
//         //   console.log("Yes");
//         console.log(arr);
// ["models", "routes", "controllers"].map((data) => {
//   fs.mkdirSync(data, { recursive: true }, (err) => {
//     if (err) throw err;
//   });
// });

//         fs.writeFileSync(".env", (err) => {
//           if (err) throw err;
//         });
//         console.log(process.cwd());
//         //   process.chdir(path.join(__dirname, "/" + "models"));
//         //   console.log(process.cwd());
//         ["models", "routes", "controllers"].map((data) => {
// process.chdir(path.join(__dirname, "/" + data));
// arr.map((info) => {
//   fs.mkdirSync(info);
// });
// process.chdir("../");
//         });
//         console.log(process.cwd());
//       } else if (args[0] !== null && args[0].toLowerCase() !== "-f") {
//         console.log("Please enter a valid command");
//       }
//     } else {
//       ["models", "routes", "controllers"].map((data) => {
//         fs.mkdirSync(data, { recursive: true }, (err) => {
//           if (err) throw err;
//         });
//       });
//     }
//   }
// } catch (err) {
//   console.log("Please enter a valid command");
// }

// console.log(args);
